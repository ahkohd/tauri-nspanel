searchState.loadedDescShard("objc2_encode", 0, "Objective-C type-encoding\nAn array with the given length and type.\nSame as <code>Encoding::Array</code>.\nA C11 <code>_Atomic</code> type.\nSame as <code>Encoding::Atomic</code>.\nA bitfield with the given number of bits, and the given …\nSame as <code>Encoding::BitField</code>.\nAn Objective-C block. Corresponds to the <code>&quot;@&quot; &quot;?&quot;</code> code.\nSame as <code>Encoding::Block</code>.\nA C++ <code>bool</code> / C99 <code>_Bool</code>. Corresponds to the <code>&quot;B&quot;</code> code.\nSame as <code>Encoding::Bool</code>.\nThe encoding of <code>c_long</code> on the current target.\nSame as <code>Encoding::C_LONG</code>.\nThe encoding of <code>c_ulong</code> on the current target.\nSame as <code>Encoding::C_ULONG</code>.\nA C <code>char</code>. Corresponds to the <code>&quot;c&quot;</code> code.\nSame as <code>Encoding::Char</code>.\nAn Objective-C class (<code>Class</code>). Corresponds to the <code>&quot;#&quot;</code> code.\nSame as <code>Encoding::Class</code>.\nA C <code>double</code>. Corresponds to the <code>&quot;d&quot;</code> code.\nSame as <code>Encoding::Double</code>.\nA C <code>_Complex</code> or <code>double _Complex</code>. Corresponds to the <code>&quot;j&quot; &quot;d&quot;</code>…\nSame as <code>Encoding::DoubleComplex</code>.\nAn Objective-C type-encoding.\nThe boxed version of <code>Encoding</code>.\nA C <code>float</code>. Corresponds to the <code>&quot;f&quot;</code> code.\nSame as <code>Encoding::Float</code>.\nA C <code>float _Complex</code>. Corresponds to the <code>&quot;j&quot; &quot;f&quot;</code> code.\nSame as <code>Encoding::FloatComplex</code>.\nA C <code>int</code>. Corresponds to the <code>&quot;i&quot;</code> code.\nSame as <code>Encoding::Int</code>.\nA C <code>long</code>. Corresponds to the <code>&quot;l&quot;</code> code.\nSame as <code>Encoding::Long</code>.\nA C <code>long double</code>. Corresponds to the <code>&quot;D&quot;</code> code.\nSame as <code>Encoding::LongDouble</code>.\nA C <code>long double _Complex</code>. Corresponds to the <code>&quot;j&quot; &quot;D&quot;</code> code.\nSame as <code>Encoding::LongDoubleComplex</code>.\nA C <code>long long</code>. Corresponds to the <code>&quot;q&quot;</code> code.\nSame as <code>Encoding::LongLong</code>.\nThe type does not have an Objective-C encoding.\nSame as <code>Encoding::None</code>.\nAn Objective-C object (<code>id</code>). Corresponds to the <code>&quot;@&quot;</code> code.\nSame as <code>Encoding::Object</code>.\nThe error that was encountered while parsing an encoding …\nA pointer to the given type.\nSame as <code>Encoding::Pointer</code>.\nAn Objective-C selector (<code>SEL</code>). Corresponds to the <code>&quot;:&quot;</code> code.\nSame as <code>Encoding::Sel</code>.\nA C <code>short</code>. Corresponds to the <code>&quot;s&quot;</code> code.\nSame as <code>Encoding::Short</code>.\nA C <code>char *</code>. Corresponds to the <code>&quot;*&quot;</code> code.\nSame as <code>Encoding::String</code>.\nA struct with the given name and fields.\nSame as <code>Encoding::Struct</code>.\nA C <code>unsigned char</code>. Corresponds to the <code>&quot;C&quot;</code> code.\nSame as <code>Encoding::UChar</code>.\nA C <code>unsigned int</code>. Corresponds to the <code>&quot;I&quot;</code> code.\nSame as <code>Encoding::UInt</code>.\nA C <code>unsigned long</code>. Corresponds to the <code>&quot;L&quot;</code> code.\nSame as <code>Encoding::ULong</code>.\nA C <code>unsigned long long</code>. Corresponds to the <code>&quot;Q&quot;</code> code.\nSame as <code>Encoding::ULongLong</code>.\nA C <code>unsigned short</code>. Corresponds to the <code>&quot;S&quot;</code> code.\nSame as <code>Encoding::UShort</code>.\nA union with the given name and members.\nSame as <code>Encoding::Union</code>.\nAn unknown type. Corresponds to the <code>&quot;?&quot;</code> code.\nSame as <code>Encoding::Unknown</code>.\nA C <code>void</code>. Corresponds to the <code>&quot;v&quot;</code> code.\nSame as <code>Encoding::Void</code>.\nCheck if one encoding is equivalent to another.\nCheck if an encoding is equivalent to a boxed encoding.\nCheck if an encoding is equivalent to the given string …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse and comsume an encoding from the start of a string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")