searchState.loadedDescShard("selectors", 0, "A cache to speed up matching of nth-index-like selectors.\nOpaque representation of an Element, for identity …\nReturns the assigned  element this element is assigned to.\nReturns the assigned  element this element is assigned to.\nCounting and non-counting Bloom filters tuned for use as …\nThe host of the containing shadow root, if any.\nReturns the mapping from the <code>exportparts</code> attribute in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the appropriate cache for the given parameters.\nEmpty string for no namespace\nReturns whether this element should ignore matching nth …\nReturns whether this element should ignore matching nth …\nReturns the mapping from the <code>exportparts</code> attribute in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether this element matches <code>:empty</code>.\nReturns whether the element is an HTML  element.\nWhether this element is a <code>link</code>.\nWhether we’re matching on a pseudo-element.\nReturns whether this element matches <code>:root</code>, i.e. whether …\nWhether this element and the <code>other</code> element have the same …\nCreates a new OpaqueElement from an arbitrarily-typed …\nSkips non-element nodes\nConverts self into an opaque representation.\nWhether the parent node of this element is a shadow root.\nSkips non-element nodes\nThe parent of a given pseudo-element, after matching a …\nThe parent of a given pseudo-element, after matching a …\nSmall helpers to abstract over different containers.\nVisitor traits for selectors.\nThe definition of whitespace per CSS Selectors Level 3 § …\nEmpty string for no namespace\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA counting Bloom filter with 8-bit counters.\nStorage class for a CountingBloomFilter that has 1-bit …\nStorage class for a CountingBloomFilter that has 8-bit …\nA counting Bloom filter with parameterized storage to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts an item with a particular hash into the bloom …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the filter might contain an item with the …\nCreates a new bloom filter.\nRemoves an item with a particular hash from the bloom …\nAll links are matched as if they are unvisted.\nAll links are matched as if they are visited and unvisited …\nIgnores any stateless pseudo-element selectors in the …\nLimited quirks mode.\nData associated with the matching process for a element.  …\nWhat kind of selector matching mode we should use.\nNo quirks mode.\nDon’t ignore any pseudo-element selectors.\nQuirks mode.\nWhich quirks mode is this document in.\nA element’s “relevant link” is the element being …\nThe mode to use when matching unvisited and visited links.\nInput with the bloom filter used to fast-reject selectors.\nThe case-sensitivity for class and ID selectors\nThe current shadow host we’re collecting :host rules for.\nExtra implementation-dependent matching data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether we’re matching inside a :not(..) selector.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether we’re matching a nested selector.\nThe matching-mode for this selector-matching operation.\nRuns F with a deeper nesting level.\nRuns F with a deeper nesting level, and marking ourselves …\nConstructs a new <code>MatchingContext</code>.\nConstructs a new <code>MatchingContext</code> for use in visited …\nAn optional cache to speed up nth-index-like selectors.\nAn optional hook function for checking whether a …\nThe quirks mode of the document.\nThe element which is going to match :scope pseudo-class. …\nReturns the current shadow host whose shadow root we’re …\nRuns F with a given shadow host which is the root of the …\nRuns F with a different VisitedHandlingMode.\nWhether a compound selector matched, and whether it was …\nSet of flags that are set on either the element or its …\nThe selector was fully matched.\nWhen a child is added or removed from the parent, the …\nThe element has an empty selector, so when a child is …\nWhen a child is added or removed from the parent, all the …\nWhen a child is added or removed from the parent, any later\nThe compound selector matched, and the next combinator …\nThe selector didn’t match.\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturns the subset of flags that apply to the parent.\nReturns the subset of flags that apply to the element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nMatches a complex selector.\nMatches a compound selector belonging to <code>selector</code>, …\nMatches a selector, fast-rejecting against a bloom filter.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nAncestor hashes for the bloom filter. We precompute these …\nA CSS simple selector or combinator. We store both in the …\nThe <code>:host</code> pseudo-class:\nThe <code>SelectorImpl</code> this pseudo-element is used for.\nThe <code>SelectorImpl</code> this pseudo-element is used for.\nPseudo-classes\nA trait that represents a pseudo-class.\nnon tree-structural pseudo-classes (see: …\nAnother combinator used for <code>::part()</code>, which represents the …\nThe <code>::part</code> pseudo-element. …\nA trait that represents a pseudo-element.\nA dummy combinator we use to the left of pseudo-elements.\npseudo-elements\nA Selector stores a sequence of simple selectors and …\nThis trait allows to define the parser implementation in …\nAnother combinator used for ::slotted(), which represent …\nThe ::slotted() pseudo-element:\nWhether the pseudo-element supports a given state selector …\nReturns the value as a combinator if applicable, None …\nReturns the combinator at index <code>index</code> (zero-indexed from …\nReturns the combinator at index <code>index</code> (zero-indexed from …\nReturns the fourth hash, reassembled from parts.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a SelectorList from a Vec of selectors. Used in …\nWhether this pseudo-class has zero specificity.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this pseudo-class is :active or :hover.\nReturns true if this combinator is a child or descendant …\nReturns true if this is a combinator.\nWhether this selector is a featureless :host selector, …\nReturns true if this combinator is a pseudo-element …\nReturns true if this combinator is a next- or …\nWhether this selector (pseudo-element part excluded) …\nWhether this pseudo-class belongs to:\nReturns an iterator over this selector in matching order …\nReturns an iterator over this selector in matching order …\nReturns an iterator over the entire sequence of simple …\nReturns an iterator over the sequence of simple selectors …\nDetails of this error\nReturns count of simple selectors and combinators in the …\nLocation where this error occurred\nPrepares this iterator to point to the next sequence to …\nParse a comma-separated list of Selectors. …\nParse a selector, without any pseudo-element.\nParse a comma separated list of compound selectors.\nWhether to parse the <code>:host</code> pseudo-class.\nThis function can return an “Err” pseudo-element in …\nWhether to parse the <code>::part()</code> pseudo-element.\nWhether to parse the <code>::slotted()</code> pseudo-element.\nReturns remaining count of the simple selectors and …\nReturns the address on the heap of the ThinArc for memory …\nWhether this pseudo-element is valid after a ::slotted(..) …\nA trait to abstract over a <code>push</code> method that may be …\nPush a value into self.\nThe selector implementation this visitor wants to visit.\nThe type parameter of selector component types.\nA trait to visit selector properties.\nEnables traversing selector components stored in various …\nTraverse selector components inside <code>self</code>.\nVisit an attribute selector that may match (there are …\nVisits a complex selector.\nVisit a simple selector.")