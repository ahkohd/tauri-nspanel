searchState.loadedDescShard("kuchikiki", 0, "Kuchikiki (口利き) is an HTML tree manipulation library …\nThe non-identifying parts of an attribute\nConvenience wrapper around a indexmap that adds method for …\nComment node\nData specific to doctype nodes.\nDoctype node\nDocument node\nData specific to document nodes.\nDocument fragment node\nElement node\nData specific to element nodes.\nhttps://www.w3.org/TR/REC-xml-names/#dt-expname\nA node inside a DOM-like tree.\nNode data specific to the node type.\nHolds a strong reference to a node, but dereferences to …\nA strong reference to a node.\nOptions for the HTML parser.\nProcessing instruction node\nA pre-compiled CSS Selector.\nA pre-compiled list of CSS Selectors.\nReceives new tree nodes during parsing.\nThe specificity of a selector.\nText node\nReturn an iterator of references to this node’s …\nAppend a new child to this node, after existing children.\nIf this node is a comment, return a reference to its …\nIf this node is a document, return a reference to …\nIf this node is a document, return a reference to …\nIf this node is an element, return a reference to …\nAccess the corresponding node.\nIf this node is a text node, return a reference to its …\nThe attributes of the elements.\nReturn an iterator of references to this node’s children.\nCompile a list of selectors. This may fail on syntax …\nLike IndexMap::contains\nReturn a reference to this node’s node-type-specific …\nReturn an iterator of references to this node’s …\nDetach a node from its parent and siblings. Children are …\nLike IndexMap::entry\nFilter an element iterator, yielding those matching this …\nReturn a reference to the first child of this node, unless …\nReturn an iterator of references to this node’s siblings …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLike IndexMap::get\nLike IndexMap::get_mut\nReturn an iterator of references to this node and its …\nReturn an iterator of references to this node and its …\nReturn an iterator of references to this node and the …\nReturn an iterator of references to this node and the …\nLike IndexMap::insert\nInsert a new sibling after this node.\nInsert a new sibling before this node.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this node is a comment, return a strong reference to …\nIf this node is a doctype, return a strong reference to …\nIf this node is a document, return a strong reference to …\nIf this node is an element, return a strong reference to …\nIf this node is a text node, return a strong reference to …\nNode iterators\nReturn a reference to the last child of this node, unless …\n“Local” part of the name\nA map of attributes whose name can have namespaces.\nReturns whether the given element matches this list of …\nReturns whether the given element matches this selector.\nThe name of the doctype\nThe namespace and local name of the element, such as …\nTrivial constructor\nCreate a <code>NodeDataRef</code> for a component in a given node.\nCreate a new node.\nCreate a new comment node.\nCreate a new doctype node.\nCreate a new document node.\nCreate a new element node.\nCreate a <code>NodeDataRef</code> for and a component that may or may …\nCreate a new processing instruction node.\nCreate a new text node.\nReturn a reference to the next sibling of this node, …\nNamespace URL\nA callback for HTML parse errors (which are never fatal).\nReturn a reference to the parent node, unless this node is …\nParse an HTML fragment with html5ever and the default …\nParse an HTML document with html5ever and the default …\nParse an HTML document with html5ever with custom …\nReturn an iterator of references to this node’s siblings …\nThe namespace prefix, if any\nPrepend a new child to this node, before existing children.\nReturn a reference to the previous sibling of this node, …\nThe public ID of the doctype\nThe quirks mode of the document, as determined by the HTML …\nLike IndexMap::remove\nReturn an iterator of the inclusive descendants element …\nReturn the first inclusive descendants element that match …\nSerialize this node and its descendants in HTML syntax to …\nSerialize this node and its descendants in HTML syntax to …\nReturn the specificity of this selector.\nThe system ID of the doctype\nIf the element is an HTML <code>&lt;template&gt;</code> element, the document …\nReturn the concatenation of all text nodes in this subtree.\nReturn the concatenation of all text nodes in this subtree.\nOptions for the HTML tokenizer.\nThis module re-exports a number of traits that are useful …\nReturn an iterator of the start and end edges of this …\nReturn an iterator of the start and end edges of this node …\nOptions for the HTML tree builder.\nThe attribute value\nAn iterator on ancestor nodes.\nA node iterator adaptor that yields comment nodes.\nAn iterator of references to a given node and its …\nConvenience methods for element iterators.\nA node iterator adaptor that yields element nodes.\nIndicates that end of a node that has children. Yielded by …\nMarks either the start or the end of a node.\nConvenience methods for node iterators.\nAn element iterator adaptor that yields elements maching …\nA double-ended iterator of sibling nodes.\nIndicates that start of a node that has children. Yielded …\nA node iterator adaptor that yields text nodes.\nAn iterator of the start and end edges of the nodes in a …\nFilter this node iterator to comment nodes.\nFilter this element iterator to elements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe underlying iterator.\nFilter this node iterator to elements maching the given …\nFilter this element iterator to elements maching the given …\nThe selectors to be matched.\nFilter this node iterator to text nodes.\nWhat the overall result of processing is.\nTrait for types that can process a tendril.\nIndicates that an error has occurred.\nIndicates the end of the stream.\nRead from the file at the given path and process …\nConsume an iterator of tendrils, processing each item, …\nProcess one tendril and finish.\nProcess this tendril.\nRead from the given stream of bytes until exhaustion and …")