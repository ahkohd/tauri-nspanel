searchState.loadedDescShard("dispatch", 0, "Rust wrapper for Apple’s Grand Central Dispatch (GCD).\nThe queue is scheduled for execution after all high …\nThe queue executes blocks concurrently.\nThe queue is scheduled for execution after all high …\nA Grand Central Dispatch group.\nAn RAII guard which will leave a <code>Group</code> when dropped.\nThe queue is scheduled for execution before any default …\nThe queue is scheduled for execution after all default …\nA predicate used to execute a closure only once for the …\nA Grand Central Dispatch queue.\nThe type of a dispatch queue.\nThe priority of a global concurrent queue.\nA counting semaphore.\nAn RAII guard which will signal a <code>Semaphore</code> when dropped.\nThe queue executes blocks serially in FIFO order.\nAn RAII guard which will resume a suspended <code>Queue</code> when …\nAn error indicating a wait timed out.\nWait to access a resource protected by self. This …\nWait until the specified timeout to access a resource …\nSubmits a closure to be executed on self the given number …\nSubmits a closure to be executed on self as a barrier and …\nSubmits a closure to be executed on self as a barrier and …\nExecutes a closure once, ensuring that no other closure …\nCreates a new dispatch <code>Group</code>.\nCreates a new dispatch <code>Queue</code>.\nIndicates that a closure has entered self, and increments …\nAfter the specified delay, submits a closure for …\nSubmits a closure asynchronously to the given <code>Queue</code> and …\nSubmits a closure for asynchronous execution on self and …\nSubmits a closure for execution on self and waits until it …\nRaw foreign function interface for libdispatch.\nSubmits a closure to be executed on self for each element …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a system-defined global concurrent <code>Queue</code> with the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether self is currently empty.\nReturns the label that was specified for self.\nDrops self, leaving the <code>Group</code>.\nReturns the serial dispatch <code>Queue</code> associated with the …\nSubmits a closure to be executed on self for each element …\nCreates a new <code>Once</code>.\nCreates a new <code>Semaphore</code> with an initial value.\nSchedules a closure to be submitted to the given <code>Queue</code> …\nDrops self, allowing the suspended <code>Queue</code> to resume.\nSignal (increment) self.\nDrops self, signaling the <code>Semaphore</code>.\nSuspends the invocation of blocks on self and returns a …\nWaits synchronously for all tasks associated with self to …\nWait for (decrement) self.\nWaits for all tasks associated with self to complete …\nWait for (decrement) self until the specified timeout has …\nCreates a new dispatch <code>Queue</code> with the given target queue.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")