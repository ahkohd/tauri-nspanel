searchState.loadedDescShard("objc2", 0, "Objective-C interface and runtime bindings\nMarks types that represent specific classes.\nMarks types whose implementation is defined in Rust.\nA type representing the instance variables that this class …\nTypes that can be sent Objective-C messages.\nWhether the type is mutable or immutable.\nThe name of the Objective-C class that this type …\nThe name of the Objective-C protocol that this type …\nMarks types that represent specific protocols.\nThe superclass of this class.\nAllocate a new instance of the class.\nAllocate a new instance of the class.\nGet an immutable reference to the superclass.\nGet a mutable reference to the superclass.\nGet a reference to the Objective-C class that this type …\nGets a reference to an <code>AnyClass</code> from the given name.\nDeprecated location for a few things that are now in the …\nDeclare a new class.\nSupport for type-encodings.\n<code>@throw</code> and <code>@try/@catch</code> exceptions.\nCreate a new type to represent a class.\nDefine methods on an external class.\nCreate a new trait to represent a protocol.\nGet a reference to the instance variable data that this …\nGet a reference to the instance variable data that this …\nGet a mutable reference to the instance variable data that …\nGet a mutable reference to the instance variable data that …\nSend a message to an object or class.\nDeprecated. Use <code>msg_send!</code> instead.\n<code>msg_send!</code> for methods returning <code>id</code>, <code>NSObject*</code>, or similar …\nMarker types for class mutability.\nGet a reference to the Objective-C protocol object that …\nGet a reference to the Objective-C protocol object that …\nReference counting utilities.\nIncrement the reference count of the receiver.\nIncrement the reference count of the receiver.\nDirect runtime bindings.\nRegister a selector with the Objective-C runtime.\nVarious explanations and topics of discussion.\nUse <code>runtime::ClassBuilder</code> instead.\nUse <code>runtime::ProtocolBuilder</code> instead.\nAn array with the given length and type.\nSame as <code>Encoding::Array</code>.\nA C11 <code>_Atomic</code> type.\nSame as <code>Encoding::Atomic</code>.\nA bitfield with the given number of bits, and the given …\nSame as <code>Encoding::BitField</code>.\nAn Objective-C block. Corresponds to the <code>&quot;@&quot; &quot;?&quot;</code> code.\nSame as <code>Encoding::Block</code>.\nA C++ <code>bool</code> / C99 <code>_Bool</code>. Corresponds to the <code>&quot;B&quot;</code> code.\nSame as <code>Encoding::Bool</code>.\nThe encoding of <code>c_long</code> on the current target.\nSame as <code>Encoding::C_LONG</code>.\nThe encoding of <code>c_ulong</code> on the current target.\nSame as <code>Encoding::C_ULONG</code>.\nA C <code>char</code>. Corresponds to the <code>&quot;c&quot;</code> code.\nSame as <code>Encoding::Char</code>.\nAn Objective-C class (<code>Class</code>). Corresponds to the <code>&quot;#&quot;</code> code.\nSame as <code>Encoding::Class</code>.\nA C <code>double</code>. Corresponds to the <code>&quot;d&quot;</code> code.\nSame as <code>Encoding::Double</code>.\nA C <code>_Complex</code> or <code>double _Complex</code>. Corresponds to the <code>&quot;j&quot; &quot;d&quot;</code>…\nSame as <code>Encoding::DoubleComplex</code>.\nThe Objective-C type-encoding for this type.\nThe encodings for the arguments.\nThe Objective-C type-encoding for this type.\nThe Objective-C type-encoding for a reference of this type.\nThe Objective-C type-encoding for this type.\nTypes that have an Objective-C type-encoding.\nTypes that are safe as arguments to Objective-C methods.\nTypes that represent an ordered group of function …\nTypes that are safe as the return value from Objective-C.\nAn Objective-C type-encoding.\nThe boxed version of <code>Encoding</code>.\nA C <code>float</code>. Corresponds to the <code>&quot;f&quot;</code> code.\nSame as <code>Encoding::Float</code>.\nA C <code>float _Complex</code>. Corresponds to the <code>&quot;j&quot; &quot;f&quot;</code> code.\nSame as <code>Encoding::FloatComplex</code>.\nA C <code>int</code>. Corresponds to the <code>&quot;i&quot;</code> code.\nSame as <code>Encoding::Int</code>.\nA C <code>long</code>. Corresponds to the <code>&quot;l&quot;</code> code.\nSame as <code>Encoding::Long</code>.\nA C <code>long double</code>. Corresponds to the <code>&quot;D&quot;</code> code.\nSame as <code>Encoding::LongDouble</code>.\nA C <code>long double _Complex</code>. Corresponds to the <code>&quot;j&quot; &quot;D&quot;</code> code.\nSame as <code>Encoding::LongDoubleComplex</code>.\nA C <code>long long</code>. Corresponds to the <code>&quot;q&quot;</code> code.\nSame as <code>Encoding::LongLong</code>.\nThe type does not have an Objective-C encoding.\nSame as <code>Encoding::None</code>.\nAn Objective-C object (<code>id</code>). Corresponds to the <code>&quot;@&quot;</code> code.\nSame as <code>Encoding::Object</code>.\nA helper trait for types that follow the “null pointer …\nThe error that was encountered while parsing an encoding …\nA pointer to the given type.\nSame as <code>Encoding::Pointer</code>.\nTypes whoose references has an Objective-C type-encoding.\nAn Objective-C selector (<code>SEL</code>). Corresponds to the <code>&quot;:&quot;</code> code.\nSame as <code>Encoding::Sel</code>.\nA C <code>short</code>. Corresponds to the <code>&quot;s&quot;</code> code.\nSame as <code>Encoding::Short</code>.\nA C <code>char *</code>. Corresponds to the <code>&quot;*&quot;</code> code.\nSame as <code>Encoding::String</code>.\nA struct with the given name and fields.\nSame as <code>Encoding::Struct</code>.\nA C <code>unsigned char</code>. Corresponds to the <code>&quot;C&quot;</code> code.\nSame as <code>Encoding::UChar</code>.\nA C <code>unsigned int</code>. Corresponds to the <code>&quot;I&quot;</code> code.\nSame as <code>Encoding::UInt</code>.\nA C <code>unsigned long</code>. Corresponds to the <code>&quot;L&quot;</code> code.\nSame as <code>Encoding::ULong</code>.\nA C <code>unsigned long long</code>. Corresponds to the <code>&quot;Q&quot;</code> code.\nSame as <code>Encoding::ULongLong</code>.\nA C <code>unsigned short</code>. Corresponds to the <code>&quot;S&quot;</code> code.\nSame as <code>Encoding::UShort</code>.\nA union with the given name and members.\nSame as <code>Encoding::Union</code>.\nAn unknown type. Corresponds to the <code>&quot;?&quot;</code> code.\nSame as <code>Encoding::Unknown</code>.\nA C <code>void</code>. Corresponds to the <code>&quot;v&quot;</code> code.\nSame as <code>Encoding::Void</code>.\nCheck if one encoding is equivalent to another.\nCheck if an encoding is equivalent to a boxed encoding.\nCheck if an encoding is equivalent to the given string …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse and comsume an encoding from the start of a string.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn Objective-C exception.\nTries to execute the given closure and catches an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThrows an Objective-C exception.\nRetrieve the immutable/mutable counterpart class, and fall …\nMarker trait for classes whose <code>hash</code> and <code>isEqual:</code> methods …\nMarker type for immutable classes.\nThe immutable counterpart of the type, or <code>Self</code> if the type …\nMarker type for immutable classes that have a mutable …\nMarker type for classes that use interior mutability.\nMarker trait for classes that can be allocated from any …\nMarker trait for classes that may feasibly be used behind …\nMarker trait for classes where <code>Retained::clone</code> / <code>Id::clone</code> …\nMarker trait for classes that are only available on the …\nMarker trait for classes that are only mutable through <code>&amp;mut</code>…\nMarker trait for classes where the <code>retain</code> selector is …\nMarker type for classes that are only safe to use from the …\nMarker trait for the different types of mutability a class …\nMarker type for mutable classes.\nThe mutable counterpart of the type, or <code>Self</code> if the type …\nMarker type for mutable classes that have a immutable …\nMarker type for root classes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn Objective-C object that has been allocated, but not …\nAn Objective-C autorelease pool.\nMarks types that are safe to pass across the closure in an …\nHelper trait to implement <code>Default</code> on <code>Retained</code>.\nHelper trait to implement <code>Default</code> on <code>Retained</code>.\nShort type-alias to <code>Retained</code>.\nHelper trait to implement <code>FromIterator</code> on <code>Retained</code>.\nHelper trait to implement <code>IntoIterator</code> on <code>Retained</code>.\nWhich kind of iterator are we turning this into?\nWhich kind of iterator are we turning this into?\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nAn Objective-C object that has been allocated and …\nA reference counted pointer type for Objective-C objects.\nHelper trait to implement <code>FromIterator</code> on <code>Retained</code>.\nHelper trait to implement <code>IntoIterator</code> on <code>Retained</code>.\nA weak pointer to an Objective-C reference counted object.\nSoft-deprecated type-alias to <code>Weak</code>.\nReturns a raw mutable pointer to the object.\nReturns a raw mutable pointer to the object.\nReturns a raw mutable pointer to the object.\nReturns a raw pointer to the object.\nReturns a raw pointer to the object.\nReturns a raw pointer to the object.\nAutoreleases the <code>Retained</code>, returning a reference bound to …\nAutoreleases the <code>Retained</code>, returning a mutable reference …\nAutoreleases the <code>Retained</code>, returning a pointer.\nAutoreleases and prepares the <code>Retained</code> to be returned to …\nExecute <code>f</code> in the context of a new autorelease pool. The …\nExecute <code>f</code> in the context of a “fake” autorelease pool.\nConvert the type of the given object to another.\nMakes a clone of the shared object.\nMake a clone of the weak pointer that points to the same …\nConstructs a new weak pointer that doesn’t reference any …\nThe default <code>Retained</code> for a type.\nThe default <code>Retained</code> for a type.\nThe default <code>Retained</code> for a type.\nThe default <code>Retained</code> for a type.\nThe default <code>Retained</code> for a type.\nObtain an immutable reference to the object.\nObtain a mutable reference to the object.\nReleases the retained object.\nDestroys the weak pointer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new weak pointer that references the given …\nConstruct an <code>Retained</code> from a pointer that already has +1 …\nConstruct a new weak pointer that references the given …\nCreates an <code>Retained</code> from an iterator.\nCreates an <code>Retained</code> from an iterator.\nCreates an iterator from an <code>Retained</code>.\nCreates an iterator from an <code>Retained</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Retained</code>, returning a raw pointer with +1 …\nConvert the object into its superclass.\nLoad the object into an <code>Retained</code> if it still exists.\nDeprecated alias for <code>Retained::from_raw</code>, see that for …\nConstruct a new weak pointer that references the given …\nReturns a unique reference to the given autoreleased …\nReturns a shared reference to the given autoreleased …\nRetain the pointer and construct an <code>Retained</code> from it.\nRetains a previously autoreleased object pointer.\nCreates an <code>Retained</code> from an iterator.\nCreates an <code>Retained</code> from an iterator.\nCreates an <code>Retained</code> from an iterator.\nCreates an iterator from an <code>Retained</code>.\nCreates an iterator from an <code>Retained</code>.\nCreates an iterator from an <code>Retained</code>.\nInitialize the instance variables for this object.\nA type that represents an Objective-C class.\nAn Objective-C object.\nA type that represents an Objective-C protocol.\nThe argument types of the method.\nUse <code>Bool</code> or <code>ffi::BOOL</code> instead.\nThe Objective-C <code>BOOL</code> type.\nThe callee type of the method.\nUse <code>AnyClass</code> instead.\nA type for declaring a new class and adding new methods …\nA pointer to the start of a method implementation.\nAn internal helper trait for <code>ProtocolObject</code>.\nA type that represents an instance variable.\nTypes that can directly be used as the receiver of …\nA type that represents a method in a class definition.\nTypes that can be used as the implementation of an …\nUse <code>Bool::NO</code> or <code>ffi::NO</code> instead.\nThe equivalent of <code>false</code> for Objective-C’s <code>BOOL</code> type.\nThe root class of most Objective-C class hierarchies.\nThe methods that are fundamental to most Objective-C …\nA type used to identify and manage memory zones.\nUse <code>AnyObject</code> instead.\nUse <code>AnyProtocol</code> instead.\nA type for declaring a new protocol and adding new methods …\nAn object representing any object that implements a …\nThe return type of the method.\nA method selector.\nFailed verifying selector on a class.\nUse <code>Bool::YES</code> or <code>ffi::YES</code> instead.\nThe equivalent of <code>true</code> for Objective-C’s <code>BOOL</code> type.\nAdds a class method with the given name and implementation.\nAdds a class method declaration with a given description.\nAdds an ivar with type <code>T</code> and the provided name.\nAdds a method with the given name and implementation.\nAdds an instance method declaration with a given …\nAdds the given protocol to self.\nAdds a requirement on another protocol.\nGet a list of the protocols to which this class conforms.\nGet a list of the protocols to which this protocol …\nReturns the <code>Encoding</code> of a single parameter type of self, or\nReturns the number of arguments accepted by self.\nConverts this into the <code>bool</code> equivalent.\nGet a pointer to the raw selector.\nRetrieves the inner <code>ffi::BOOL</code> boolean type, to be used in …\nDynamically find the class of this object.\nReturns a specified class method for self, or <code>None</code> if self …\nObtains the list of registered class definitions.\nReturns the total number of registered classes.\nCheck whether the object conforms to a given protocol.\nCheck whether the object conforms to a given protocol.\nChecks whether this class conforms to the specified …\nChecks whether this protocol conforms to the specified …\nA textual representation of the object to use when …\nA textual representation of the object to use when …\nA textual representation of the object.\nA textual representation of the object.\nHandle messages the object doesn’t recognize.\nCheck whether the protocols are equal, or conform to each …\nExchange the implementation of two methods.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a type-erased object from a type implementing a …\nGet a mutable type-erased reference from a type …\nCreates this from a boolean value received from a raw …\nGet an immutable type-erased reference from a type …\nGet a type-erased object from a type implementing a …\nReturns the class definition of a specified class, or <code>None</code> …\nReturns the protocol definition of a specified protocol, …\nUse <code>Ivar::load</code> instead.\nUse <code>Ivar::load_mut</code> instead.\nAn integer that can be used as a table address in a hash …\nAn integer that can be used as a table address in a hash …\nReturns the implementation of this method.\nInitialize an already allocated object.\nReturns a specified instance method for self, or <code>None</code> if …\nDescribes the instance methods implemented by self.\nReturns the size of instances of self.\nReturns the ivar for a specified instance variable of …\nDescribes the instance variables declared by self.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the object is equal to an arbitrary other …\nCheck whether the object is equal to an arbitrary other …\nCheck if the object is an instance of the class, or one of …\nCheck if the object is an instance of the class, or one of …\nCheck if the object is an instance of a specific class, …\nCheck if the object is an instance of a specific class, …\nCheck whether the receiver is a subclass of the <code>NSProxy</code> …\nCheck whether the receiver is a subclass of the <code>NSProxy</code> …\nReturns <code>true</code> if <code>self</code> is <code>NO</code>.\nCheck if the object is an instance of the class type, or …\nCheck if the object is an instance of the class type, or …\nReturns <code>true</code> if <code>self</code> is not <code>NO</code>.\nReturns a reference to the instance variable with the …\nReturns a mutable reference to the ivar with the given …\nReturns a pointer to the instance variable / ivar on the …\nReturns the metaclass of self.\nReturns the instance variable’s name.\nReturns the name of self.\nReturns the name of the class.\nReturns the name of self.\nReturns the string representation of the selector.\nCreate a new empty <code>NSObject</code>.\nCreates an Objective-C boolean from a Rust boolean.\nConstructs a <code>ClassBuilder</code> with the given name and …\nConstructs a <code>ProtocolBuilder</code> with the given name.\nReturns the instance variable’s offset from the object …\nObtains the list of registered protocol definitions.\nRegisters the <code>ClassBuilder</code>, consuming it, and returns a …\nRegisters the <code>ProtocolBuilder</code>, consuming it and returning …\nRegisters a selector with the Objective-C runtime.\nCheck whether the object implements or inherits a method …\nCheck whether the object implements or inherits a method …\nCheck whether instances of this class respond to the given …\nThe reference count of the object.\nThe reference count of the object.\nReturns the <code>Encoding</code> of self’s return type.\nConstructs a <code>ClassBuilder</code> declaring a new root class with …\nSends a message to the receiver with the given selector …\nSends a message to the receiver with the given selector …\nSends a message to a specific superclass with the given …\nSends a message to a specific superclass with the given …\nChange the class of the object at runtime.\nSet the implementation of this method.\nReturns the superclass of self, or <code>None</code> if self is a root …\nReturns the instance variable’s <code>@encode(type)</code> string.\nVerify argument and return types for a given selector.\nAbout the generated framework crates\nChangelog\nInterop with <code>core-foundation</code>-like crates\nLayered Safety\nCargo features in framework crates\nFramework crate changelog\nUse of <code>Deref</code>\nList of framework crates")