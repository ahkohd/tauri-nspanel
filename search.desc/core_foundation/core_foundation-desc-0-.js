searchState.loadedDescShard("core_foundation", 0, "This crate provides wrappers around the underlying …\nHeterogeneous immutable arrays.\nA Boolean type.\nCore Foundation Bundle Type\nA set of Unicode compliant characters.\nCore Foundation byte buffers.\nCore Foundation date objects.\nDeclare a Rust type that wraps an underlying …\nDictionaries of key-value pairs.\nCore Foundation errors.\nImplement <code>std::fmt::Debug</code> for the given type.\nProvide an implementation of the <code>TCFType</code> trait for the Rust\nImmutable numbers.\nCore Foundation property lists\nAn immutable bag of elements.\nImmutable strings.\nCore Foundation time zone objects.\nA URL type for Core Foundation.\nCore Foundation UUID objects.\nA heterogeneous immutable array.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>CFArray</code> with the given elements, which must …\nCreates a new <code>CFArray</code> with the given elements, which must …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the same array, but with the type reset to void …\nReturns <code>true</code> if the array contains no elements.\nIterates over the elements of this <code>CFArray</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSuperclass of all Core Foundation objects.\nA trait describing how to convert from the stored …\nA trait describing how to convert from the stored …\nA reference to a mutable element inside a container\nA reference to an element inside a container\nThe reference type wrapped inside this type.\nAll Core Foundation types implement this trait. The …\nTrait for all types which are Core Foundation reference …\nA trait describing how to convert from the stored …\nReturns the object as a wrapped <code>CFType</code>. The reference …\nReturns the object as a raw <code>CFTypeRef</code>. The reference count …\nReturns the object as its concrete <code>TypeRef</code>.\nTry to downcast the <code>CFType</code> to a subclass. Checking if the …\nSimilar to <code>downcast</code>, but consumes self and can thus avoid …\nFormats the value using <code>CFCopyDescription</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if this value is an instance of another type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the object as a wrapped <code>CFType</code>. Consumes self and …\nConstant used by some functions to indicate failed …\nReturns the reference count of the object. It is unwise to …\nWrites a debugging version of this object on standard …\nAlways use this method to construct a <code>CFIndex</code> value. It …\nReturns the type ID for this class.\nReturns the type ID of this object.\nReturns an instance of the object, wrapping the underlying …\nReturns an instance of the object, wrapping the underlying …\nA Boolean type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA Bundle type.\nBundle’s resources location\nBundle’s own location\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBundle’s own location\nBundle’s resources location\nAn immutable set of Unicode characters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA byte buffer.\nReturns a pointer to the underlying bytes in this data. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>CFData</code> referencing <code>buffer</code> without creating a copy\nCreates a <code>CFData</code> around a copy <code>buffer</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this byte buffer is empty.\nReturns the length of this byte buffer.\nA date.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds the key-value pair to the dictionary if no such key …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new mutable dictionary with the key-value pairs …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPanics\nPanics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the same dictionary, but with the types reset to …\nReturns the same dictionary, but with the types reset to …\nRemoves the value of the key from the dictionary.\nReplaces the value of the key in the dictionary.\nSets the value of the key in the dictionary.\nReturns a <code>CFDictionary</code> pointing to the same underlying …\nReturns a <code>CFMutableDictionary</code> pointing to the same …\nAn error value.\nReturns the code identifying this type of error.\nReturns a human-presentable description of the error.\nReturns a string identifying the domain with which this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn immutable numeric value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn immutable numeric value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA CFPropertyList struct. This is superclass to <code>CFData</code>, …\nTrait for all subclasses of <code>CFPropertyList</code>.\nTry to downcast the <code>CFPropertyList</code> to a subclass. Checking …\nSimilar to <code>downcast</code>, but consumes self and can thus avoid …\nReturns the argument unchanged.\nReturns <code>true</code> if this value is an instance of another type.\nCalls <code>U::from(self)</code>.\nEqual to <code>to_CFPropertyList</code>, but consumes self and avoids …\nReturns the reference count of the object. It is unwise to …\nWrites a debugging version of this object on standard …\nCreate an instance of the superclass type <code>CFPropertyList</code> …\nReturns the type ID of this object. Will be one of <code>CFData</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn immutable bag of elements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new set from a list of <code>CFType</code> instances.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the set contains no elements.\nGet the number of elements in the <code>CFSet</code>.\nAn immutable string in one of a variety of encodings.\nReturns the number of characters in the string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLike <code>CFString::new</code>, but references a string that can be …\nSee also <code>CFString::new()</code> for a variant of this which does …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>CFString</code> instance from a Rust string.\nA time zone.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe timezone database ID that identifies the time zone. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA UUID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")