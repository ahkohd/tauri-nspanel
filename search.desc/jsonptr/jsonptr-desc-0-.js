searchState.loadedDescShard("jsonptr", 0, "jsonptr - JSON Pointers for Rust\nAssign is implemented by types which can internally assign …\nThe data structure returned from a successful call to …\nDelete is implemented by types which can internally remove …\nAn enum representing possible errors that can occur when …\nError associated with <code>Assign</code>\nError associated with <code>Delete</code>\nError associated with <code>Resolve</code>\nIndicates an error occurred while parsing a <code>usize</code> (…\nIndicates an error occurred while parsing a <code>usize</code> (…\nIndicates that the Pointer was malformed because it …\nAn invalid <code>Pointer</code> and the error that caused it.\nIndicates that a Pointer was malformed.\nHelper type for deserialization. Either a valid <code>Pointer</code> or …\nIndicates that the Pointer was malformed because it did …\nIndicates that a Pointer was not found in the data.\nNotFoundError indicates that a Pointer was not found in …\nNonUTF8\nPointer was not in UTF-8 format.\nIndicates that the Pointer contains an index of an array …\nIndicates that the <code>Pointer</code> contains an index of an array …\nRepresents an that an error occurred when parsing an index.\nParseError represents an that an error occurred when …\nA JSON Pointer is a string containing a sequence of zero …\nA valid <code>Pointer</code>.\nReturned from <code>Pointer::replace_token</code> when the provided …\nResolve is implemented by types which can resolve a …\nResolveMut is implemented by types which can resolve a …\nA <code>Token</code> is a segment of a JSON Pointer, seperated by ‘/…\nAn iterator over the tokens in a Pointer.\nRepresents an error that occurs when attempting to resolve …\nRepresents an error that occurs when attempting to resolve …\nMerges two <code>Pointer</code>s by appending <code>other</code> onto <code>self</code>.\nAttempts to parse the given <code>Token</code> as an array index (<code>usize</code>…\nReturns <code>&amp;String</code> for usage as a key for <code>serde_json::Map</code>\nExtracts a string slice containing the entire encoded …\nReturns the <code>&amp;str</code> representation of the <code>Token</code>\nAssign a value of based on the path provided by a JSON …\nAttempts to assign <code>src</code> to <code>dest</code> based on the path in this …\nThe value that was assigned.\nA <code>Pointer</code> consisting of the path which was assigned.\nReturns the last <code>Token</code> in the <code>Pointer</code>.\nClears the <code>Pointer</code>, setting it to root (<code>&quot;&quot;</code>).\nReturns the number of tokens in the <code>Pointer</code>.\nThe number of tokens in the <code>Pointer</code>.\nThe path which was created or replaced.\nReturns the decoded <code>&amp;str</code> representation of the <code>Token</code>.\nAttempts to internally delete a value based upon a Pointer.\nAttempts to delete a <code>serde_json::Value</code> based upon the path …\nReturns the encoded <code>&amp;str</code> representation of the <code>Token</code>.\nReturns the first <code>Token</code> in the <code>Pointer</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new token from <code>encoded</code>. The token should be …\nReturns the first <code>Token</code> in the <code>Pointer</code>.\nAttempts to get a <code>Token</code> by the index. Returns <code>None</code> if the …\nThe index of the array that was out of bounds.\nThe index of the token that was out of bounds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the error is <code>Error::IndexError</code>.\nReturns <code>true</code> if the error is <code>Error::NotFoundError</code>.\nReturns <code>true</code> if the JSON Pointer equals <code>&quot;&quot;</code>.\nReturns <code>true</code> if the error is <code>Error::UnresolvableError</code>.\nReturns the last token in the <code>Pointer</code>.\nThe leaf node, if applicable, which was expected to be …\nThe length of the array.\nCreates a new <code>Pointer</code> from a slice of non-encoded strings.\nCreate a new token from <code>val</code>. The token is encoded per RFC …\nCreates a new <code>UnresolvableError</code> with the given <code>Pointer</code>.\nCreates a new <code>NotFoundError</code> with the given <code>Pointer</code>.\nParses <code>value</code> as a JSON Pointer.\nByte slice that was not in UTF-8 format.\nThe unresolved <code>Pointer</code>.\nThe <code>Pointer</code> which could not be resolved.\nThe subject <code>Pointer</code>.\nRemoves and returns the last <code>Token</code> in the <code>Pointer</code> if it …\nRemoves and returns the first <code>Token</code> in the <code>Pointer</code> if it …\nExposes the traits <code>Assign</code>, <code>Delete</code>, <code>Resolve</code>, <code>ResolveMut</code>\nPushes a <code>Token</code> onto the back of this <code>Pointer</code>.\nPushes a <code>Token</code> onto the front of this <code>Pointer</code>.\nAttempts to replace a <code>Token</code> by the index, returning the …\nThe value that was replaced.\nResolve a reference to a <code>serde_json::Value</code> based on the …\nAttempts to resolve a <code>Value</code> based on the path in this …\nResolve a mutable reference to a <code>serde_json::Value</code> based …\nAttempts to resolve a mutable <code>Value</code> based on the path in …\nCreates a root json pointer.\nThe source <code>ParseIntError</code>\nUnderlying <code>std::str::Utf8Error</code>.\nReturns a <code>serde_json::Value</code> representation of this <code>Pointer</code>\nThe <code>Token</code> which was unable to be parsed as an index.\nThe <code>Token</code> which was out of bounds.\nReturns an iterator of <code>Token</code>s in the <code>Pointer</code>.\nFinds the commonality between this and another <code>Pointer</code>.")