searchState.loadedDescShard("core_graphics", 0, "Evil private APIs.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if has access\nIf current app not in list, will open window. Return the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA borrowed reference to a <code>CGColorSpace</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe ACEScg color space.\nThe Adobe RGB (1998) color space.\nThe DCI P3 color space, which is the digital cinema …\nThe Display P3 color space, created by Apple.\nThe Display P3 color space, using the HLG transfer …\nThe extended gray color space.\nThe Display P3 color space with a linear transfer function …\nThe extended gray color space with a linear transfer …\nThe recommendation of the International Telecommunication …\nThe sRGB color space with a linear transfer function and …\nThe extended sRGB color space.\nThe generic CMYK color space.\nThe name of the generic gray color space.\nThe generic gray color space that has an exponential …\nThe generic LAB color space.\nThe name of the generic RGB color space.\nThe generic RGB color space with a linear transfer …\nThe XYZ color space, as defined by the CIE 1931 standard.\nThe recommendation of the International Telecommunication …\nThe recommendation of the International Telecommunication …\nThe gray color space using a linear transfer function.\nThe sRGB color space with a linear transfer function.\nThe Reference Output Medium Metric (ROMM) RGB color space.\nThe standard Red Green Blue (sRGB) color space.\nA borrowed reference to a <code>CGContext</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA borrowed reference to a <code>CGDataProvider</code>.\nEncapsulates custom data that can be wrapped.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nCreates a copy of the data from the underlying …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the length of this custom data. This value must …\nReturns a pointer to the start of the custom data. This …\nA heterogeneous immutable array.\nThe configuration parameters that are passed to a display …\nA borrowed reference to a <code>CGDisplayMode</code>.\nA client-supplied callback function that’s invoked …\nProvides count of displays that are active (or drawable).\nProvides a list of displays that are active (or drawable).\nGet a flags value with all known bits set.\nConnects or disconnects the mouse and cursor while an …\nBegins a new set of display configuration changes.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the bounds of a display in the global display …\nCancels a set of display configuration changes.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCompletes a set of display configuration changes.\nChanges the configuration of a mirroring set.\nConfigures the origin of a display in the global display …\nConfigures the display mode of a display.\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nReturns information about a display’s current …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>CFArray</code> with the given elements, which must …\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new <code>CFArray</code> with the given elements, which must …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nPanics\nHides the mouse cursor, and increments the hide cursor …\nReturns an image containing the contents of the specified …\nReturns an image containing the contents of a portion of …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the same array, but with the type reset to void …\nReturns the same dictionary, but with the types reset to …\nReturns a Boolean value indicating whether a display is …\nWhether all known bits in this flags value are set.\nReturns a boolean indicating whether a display is always …\nReturns a boolean indicating whether a display is sleeping …\nReturns a boolean indicating whether a display is …\nReturns <code>true</code> if the array contains no elements.\nWhether all bits in this flags value are unset.\nReturns a boolean indicating whether a display is in a …\nReturns a boolean indicating whether a display is in a …\nReturns a boolean indicating whether a display is the main …\nReturns a boolean indicating whether a display is …\nReturns a boolean indicating whether a display is running …\nIterates over the elements of this <code>CFArray</code>.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe display has been added to the active display list.\nThe display configuration is about to change.\nThe shape of the desktop (the union of display areas) has …\nThe display has been disabled.\nThe display has been enabled.\nThe display is now mirroring another display.\nThe location of the upper-left corner of the display in …\nThe display has been removed from the active display list.\nThe display is now the main display.\nThe display mode has changed.\nThe display is no longer mirroring another display.\nReturns the the main display.\nFor a secondary display in a mirroring set, returns the …\nReturns the model number of a display monitor.\nMoves the mouse cursor to a specified point relative to …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nA value that will never correspond to actual hardware.\nReturns the display height in pixel units.\nReturns the display width in pixel units.\nReturns the primary display in a hardware mirroring set.\nThe intersection of a source flags value with the …\nReturns the rotation angle of a display in degrees.\nReturns the width and height of a display in millimeters.\nReturns a composite image based on a dynamically generated …\nReturns a composite image of the specified windows.\nReturns the serial number of a display monitor.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nDecrements the hide cursor count, and shows the mouse …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns a <code>CFMutableDictionary</code> pointing to the same …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the logical unit number of a display.\nReturns a boolean indicating whether Quartz is using …\nReturns the vendor number of the specified display’s …\nMoves the mouse cursor without generating events.\nGenerates and returns information about the selected …\nFlags for events\nA borrowed reference to a <code>CGEvent</code>.\nPossible tapping points for events.\nConstants that specify the different types of input events.\nKey to access a field that contains the event source Unix …\nKey to access a field that contains the event source state …\nKey to access a field that contains the event source Unix …\nKey to access a field that contains the event source …\nKey to access a field that contains the event source Unix …\nKey to access a field that contains the event target …\nKey to access a field that contains the event target Unix …\nConstants used as keys to access specialized fields in …\nKey to access an integer field, non-zero when this is an …\nKey to access an integer field that contains the keyboard …\nKey to access an integer field that contains the virtual …\nKey codes for keys that are independent of keyboard layout.\nKey to access an integer field that contains the mouse …\nKey to access an integer field that contains the mouse …\nKey to access an integer field that contains the …\nKey to access an integer field that contains the vertical …\nKey to access an integer field. The value is non-zero if …\nKey to access an integer field that contains the mouse …\nKey to access a double field that contains the mouse …\nKey to access an integer field that encodes the mouse …\nAdded in 10.5; made public in 10.7.\nKey to access an integer field that contains scrolling …\nKey to access an integer field that contains scrolling …\nKey to access a field that contains scrolling data. The …\nKey to access a field that contains scrolling data. The …\nKey to access an integer field that indicates whether the …\nKey to access an integer field that indicates whether a …\nKey to access an integer field that contains pixel-based …\nKey to access an integer field that contains pixel-based …\nKey to access an integer field that contains the …\nKey to access an integer field that contains the tablet …\nKey to access a double field that contains the tablet pen …\nKey to access an integer field that contains the absolute …\nKey to access an integer field that contains the absolute …\nKey to access an integer field that contains the absolute …\nKey to access a double field that contains the tablet pen …\nKey to access a double field that contains the tangential …\nKey to access a double field that contains the horizontal …\nKey to access a double field that contains the vertical …\nKey to access an integer field that contains a …\nKey to access an integer field that contains a …\nKey to access an integer field that contains a …\nKey to access an integer field that contains the device …\nKey to access an integer field that contains the …\nKey to access an integer field that indicates whether the …\nKey to access an integer field that contains the …\nKey to access an integer field that contains the pointer …\nKey to access an integer field that contains the …\nKey to access an integer field that contains the …\nKey to access an integer field that contains the …\nKey to access an integer field that contains the …\nKey to access an integer field that contains the …\nKey to access an integer field that contains the …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA borrowed reference to a <code>CGEventSource</code>.\nPossible source states of an event source.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA borrowed reference to a <code>CGFont</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA borrowed reference to a <code>CGGradient</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA borrowed reference to a <code>CGImage</code>.\nReturns a cropped image. If the <code>rect</code> specifies a rectangle …\nReturns the raw image bytes wrapped in <code>CFData</code>. Note, the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA borrowed reference to a <code>CGPath</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis should always be memory-safe; the window server …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")