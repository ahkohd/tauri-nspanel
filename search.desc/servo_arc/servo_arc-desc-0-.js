searchState.loadedDescShard("servo_arc", 0, "Fork of Arc for Servo. This has the following advantages …\nA “borrowed Arc”. This is a pointer to a T that is …\nStructure to allow Arc-managing some fixed-sized data and …\nHeader data with an inline length. Consumers that use …\nWrapper type for pointers to get the non-zero …\nAn Arc, except it holds a pointer to the T instead of to …\nAn Arc that is known to be uniquely owned\nProduce a pointer to the data that can be converted back …\nProduce a pointer to the data that can be converted back …\nClone it as an Arc\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an Arc for a HeaderSlice using the given header …\nConverts a RawOffsetArc into an Arc. This consumes the …\nFor constructing from a reference known to be Arc-backed, …\nConverts a ThinArc into an Arc. This consumes the ThinArc, …\nThe fixed-sized data.\nThe fixed-sized data.\nReturns the address on the heap of the Arc itself – not …\nReturns the address on the heap of the ThinArc itself – …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts an Arc into a RawOffsetArc. This consumes the …\nConverts an Arc into a ThinArc. This consumes the Arc, so …\nIf uniquely owned, provide a mutable reference Else create …\nConstruct a new UniqueArc\nCreates a new HeaderWithLength.\nConvert to a shareable Arc once we’re done using it\nThe dynamically-sized data.\nTemporarily converts |self| into a bonafide Arc and …\nTemporarily converts |self| into a bonafide Arc and …\nTemporarily converts |self| into a bonafide RawOffsetArc …")