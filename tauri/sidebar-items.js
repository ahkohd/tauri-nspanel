window.SIDEBAR_ITEMS = {"attr":[["command","Mark a function as a command handler. It creates a wrapper function with the necessary glue code."]],"enum":[["ActivationPolicy","Application’s activation policy. Corresponds to NSApplicationActivationPolicy."],["CursorIcon","Describes the appearance of the mouse cursor."],["Error","The Tauri error enum. Runtime errors that can happen inside a Tauri application."],["EventLoopMessage","The user event type."],["FileDropEvent","The file drop event payload."],["Icon","A icon definition."],["InvokeResponse","Response from a [`InvokeMessage`] passed to the [`InvokeResolver`]."],["MenuEntry","An entry on the system tray menu."],["MenuItem","A menu item, bound to a pre-defined action or `Custom` emit an event. Note that status bar only supports `Custom` menu item variants. And on the menu bar, some platforms might not support some of the variants. Unsupported variant will be no-op on such platform."],["NativeImage","Named images defined by the system."],["Pattern","An application pattern."],["Position","A position that’s either physical or logical."],["RunEvent","An application event, triggered from the event loop."],["Size","A size that’s either physical or logical."],["Theme","System theme."],["TitleBarStyle","How the window title bar should be displayed on macOS."],["UserAttentionType","Type of user attention requested on a window."],["WindowEvent","An event from a window."],["WindowUrl","An URL to open on a Tauri webview window."]],"macro":[["generate_context","Reads the config file at compile time and generates a [`Context`] based on its content."],["generate_handler","Accepts a list of commands functions. Creates a handler that allows commands to be called from JS with invoke()."],["tauri_build_context","Include a [`Context`] that was generated by `tauri-build` inside your build script."]],"mod":[["api","The Tauri API interface."],["async_runtime","The singleton async runtime used by Tauri and exposed to users."],["command","The Tauri custom commands types and traits."],["http",""],["plugin","The Tauri plugin extension to expand Tauri functionality."],["scope","The allowlist scopes."],["window","The Tauri window types and functions."]],"struct":[["AboutMetadata","Application metadata for the [`MenuItem::About`] action."],["App","The instance of the currently running application."],["AppHandle","A handle to the currently running application."],["Asset","A resolved asset."],["AssetResolver","The asset resolver is a helper to access the [`tauri_utils::assets::Assets`] interface."],["Builder","Builds a Tauri application."],["CloseRequestApi","Api exposed on the `CloseRequested` event."],["Config","The Tauri configuration object. It is read from a file where you can define your frontend assets, configure the bundler, enable the app updater, define a system tray, enable APIs via the allowlist and more."],["Context","User supplied data required inside of a Tauri application."],["CustomMenuItem","A custom menu item."],["Env","Information about environment variables."],["Event","An event that was triggered."],["EventHandler","Represents an event handler."],["GlobalWindowEvent","A window event that was triggered on the specified window."],["Invoke","The message and resolver given to a custom command."],["InvokeError","Error response from an [`InvokeMessage`]."],["InvokeMessage","An invoke message."],["InvokePayload","The payload used on the IPC invoke."],["InvokeResolver","Resolver of a invoke message."],["LogicalPosition","A position represented in logical pixels."],["LogicalSize","A size represented in logical pixels."],["Menu","A window menu."],["MenuEvent","The window menu event."],["PackageInfo","`tauri::App` package information."],["PageLoadPayload","The payload for the [`OnPageLoad`] hook."],["PathResolver","The path resolver is a helper for the application-specific [`crate::api::path`] APIs."],["PhysicalPosition","A position represented in physical pixels."],["PhysicalSize","A size represented in physical pixels."],["RunIteration","Metadata for a runtime event loop iteration on `run_iteration`."],["State","A guard for a state value."],["StateManager","The Tauri state manager."],["Submenu",""],["WebviewAttributes","The attributes used to create an webview."],["WindowMenuEvent","A menu event that was triggered on a window."]],"trait":[["Assets","Represents a container of file assets that are retrievable during runtime."],["Manager","Manages a running application."],["Pixel",""],["Runtime","The webview runtime interface. A wrapper around [`runtime::Runtime`] with the proper user event type associated."]],"type":[["InvokeHandler","A closure that is run every time Tauri receives a message it doesn’t explicitly handle."],["InvokeResponder","A closure that is responsible for respond a JS message."],["OnPageLoad","A closure that is run once every time a window is created and loaded."],["Result","`Result<T, ::tauri::Error>`"],["SetupHook","A closure that is run when the Tauri application is setting up."],["SyncTask","A task to run on the main thread."],["Wry","A Tauri [`Runtime`] wrapper around wry."]]};