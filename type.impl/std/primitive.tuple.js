(function() {var type_impls = {
"html5ever":[],
"markup5ever":[],
"wry":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoConcreteBlock%3C(A,)%3E-for-X\" class=\"impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#221\">source</a><a href=\"#impl-IntoConcreteBlock%3C(A,)%3E-for-X\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, R, X&gt; <a class=\"trait\" href=\"block/trait.IntoConcreteBlock.html\" title=\"trait block::IntoConcreteBlock\">IntoConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A,)</a>&gt; for X<div class=\"where\">where\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A) -&gt; R,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ret\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ret\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"block/trait.IntoConcreteBlock.html#associatedtype.Ret\" class=\"associatedtype\">Ret</a> = R</h4></section></summary><div class='docblock'>The return type of the resulting <code>ConcreteBlock</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_concrete_block\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#221\">source</a><a href=\"#method.into_concrete_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"block/trait.IntoConcreteBlock.html#tymethod.into_concrete_block\" class=\"fn\">into_concrete_block</a>(self) -&gt; <a class=\"struct\" href=\"block/struct.ConcreteBlock.html\" title=\"struct block::ConcreteBlock\">ConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A,)</a>, R, X&gt;</h4></section></summary><div class='docblock'>Consumes self to create a <code>ConcreteBlock</code>.</div></details></div></details>","IntoConcreteBlock<(A,)>","wry::webview::RGBA"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoConcreteBlock%3C(A,+B)%3E-for-X\" class=\"impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#222\">source</a><a href=\"#impl-IntoConcreteBlock%3C(A,+B)%3E-for-X\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, R, X&gt; <a class=\"trait\" href=\"block/trait.IntoConcreteBlock.html\" title=\"trait block::IntoConcreteBlock\">IntoConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B)</a>&gt; for X<div class=\"where\">where\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B) -&gt; R,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ret\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ret\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"block/trait.IntoConcreteBlock.html#associatedtype.Ret\" class=\"associatedtype\">Ret</a> = R</h4></section></summary><div class='docblock'>The return type of the resulting <code>ConcreteBlock</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_concrete_block\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#222\">source</a><a href=\"#method.into_concrete_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"block/trait.IntoConcreteBlock.html#tymethod.into_concrete_block\" class=\"fn\">into_concrete_block</a>(self) -&gt; <a class=\"struct\" href=\"block/struct.ConcreteBlock.html\" title=\"struct block::ConcreteBlock\">ConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B)</a>, R, X&gt;</h4></section></summary><div class='docblock'>Consumes self to create a <code>ConcreteBlock</code>.</div></details></div></details>","IntoConcreteBlock<(A, B)>","wry::webview::RGBA"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoConcreteBlock%3C(A,+B,+C)%3E-for-X\" class=\"impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#223\">source</a><a href=\"#impl-IntoConcreteBlock%3C(A,+B,+C)%3E-for-X\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C, R, X&gt; <a class=\"trait\" href=\"block/trait.IntoConcreteBlock.html\" title=\"trait block::IntoConcreteBlock\">IntoConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C)</a>&gt; for X<div class=\"where\">where\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C) -&gt; R,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ret\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ret\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"block/trait.IntoConcreteBlock.html#associatedtype.Ret\" class=\"associatedtype\">Ret</a> = R</h4></section></summary><div class='docblock'>The return type of the resulting <code>ConcreteBlock</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_concrete_block\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#223\">source</a><a href=\"#method.into_concrete_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"block/trait.IntoConcreteBlock.html#tymethod.into_concrete_block\" class=\"fn\">into_concrete_block</a>(self) -&gt; <a class=\"struct\" href=\"block/struct.ConcreteBlock.html\" title=\"struct block::ConcreteBlock\">ConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C)</a>, R, X&gt;</h4></section></summary><div class='docblock'>Consumes self to create a <code>ConcreteBlock</code>.</div></details></div></details>","IntoConcreteBlock<(A, B, C)>","wry::webview::RGBA"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoConcreteBlock%3C(A,+B,+C,+D)%3E-for-X\" class=\"impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#224\">source</a><a href=\"#impl-IntoConcreteBlock%3C(A,+B,+C,+D)%3E-for-X\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C, D, R, X&gt; <a class=\"trait\" href=\"block/trait.IntoConcreteBlock.html\" title=\"trait block::IntoConcreteBlock\">IntoConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D)</a>&gt; for X<div class=\"where\">where\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D) -&gt; R,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ret\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ret\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"block/trait.IntoConcreteBlock.html#associatedtype.Ret\" class=\"associatedtype\">Ret</a> = R</h4></section></summary><div class='docblock'>The return type of the resulting <code>ConcreteBlock</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_concrete_block\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#224\">source</a><a href=\"#method.into_concrete_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"block/trait.IntoConcreteBlock.html#tymethod.into_concrete_block\" class=\"fn\">into_concrete_block</a>(self) -&gt; <a class=\"struct\" href=\"block/struct.ConcreteBlock.html\" title=\"struct block::ConcreteBlock\">ConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D)</a>, R, X&gt;</h4></section></summary><div class='docblock'>Consumes self to create a <code>ConcreteBlock</code>.</div></details></div></details>","IntoConcreteBlock<(A, B, C, D)>","wry::webview::RGBA"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E)%3E-for-X\" class=\"impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#225\">source</a><a href=\"#impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E)%3E-for-X\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C, D, E, R, X&gt; <a class=\"trait\" href=\"block/trait.IntoConcreteBlock.html\" title=\"trait block::IntoConcreteBlock\">IntoConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E)</a>&gt; for X<div class=\"where\">where\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E) -&gt; R,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ret\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ret\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"block/trait.IntoConcreteBlock.html#associatedtype.Ret\" class=\"associatedtype\">Ret</a> = R</h4></section></summary><div class='docblock'>The return type of the resulting <code>ConcreteBlock</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_concrete_block\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#225\">source</a><a href=\"#method.into_concrete_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"block/trait.IntoConcreteBlock.html#tymethod.into_concrete_block\" class=\"fn\">into_concrete_block</a>(self) -&gt; <a class=\"struct\" href=\"block/struct.ConcreteBlock.html\" title=\"struct block::ConcreteBlock\">ConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E)</a>, R, X&gt;</h4></section></summary><div class='docblock'>Consumes self to create a <code>ConcreteBlock</code>.</div></details></div></details>","IntoConcreteBlock<(A, B, C, D, E)>","wry::webview::RGBA"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F)%3E-for-X\" class=\"impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#226\">source</a><a href=\"#impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F)%3E-for-X\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C, D, E, F, R, X&gt; <a class=\"trait\" href=\"block/trait.IntoConcreteBlock.html\" title=\"trait block::IntoConcreteBlock\">IntoConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F)</a>&gt; for X<div class=\"where\">where\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F) -&gt; R,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ret\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ret\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"block/trait.IntoConcreteBlock.html#associatedtype.Ret\" class=\"associatedtype\">Ret</a> = R</h4></section></summary><div class='docblock'>The return type of the resulting <code>ConcreteBlock</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_concrete_block\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#226\">source</a><a href=\"#method.into_concrete_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"block/trait.IntoConcreteBlock.html#tymethod.into_concrete_block\" class=\"fn\">into_concrete_block</a>(self) -&gt; <a class=\"struct\" href=\"block/struct.ConcreteBlock.html\" title=\"struct block::ConcreteBlock\">ConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F)</a>, R, X&gt;</h4></section></summary><div class='docblock'>Consumes self to create a <code>ConcreteBlock</code>.</div></details></div></details>","IntoConcreteBlock<(A, B, C, D, E, F)>","wry::webview::RGBA"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F,+G)%3E-for-X\" class=\"impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#227\">source</a><a href=\"#impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F,+G)%3E-for-X\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C, D, E, F, G, R, X&gt; <a class=\"trait\" href=\"block/trait.IntoConcreteBlock.html\" title=\"trait block::IntoConcreteBlock\">IntoConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G)</a>&gt; for X<div class=\"where\">where\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G) -&gt; R,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ret\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ret\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"block/trait.IntoConcreteBlock.html#associatedtype.Ret\" class=\"associatedtype\">Ret</a> = R</h4></section></summary><div class='docblock'>The return type of the resulting <code>ConcreteBlock</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_concrete_block\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#227\">source</a><a href=\"#method.into_concrete_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"block/trait.IntoConcreteBlock.html#tymethod.into_concrete_block\" class=\"fn\">into_concrete_block</a>(self) -&gt; <a class=\"struct\" href=\"block/struct.ConcreteBlock.html\" title=\"struct block::ConcreteBlock\">ConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G)</a>, R, X&gt;</h4></section></summary><div class='docblock'>Consumes self to create a <code>ConcreteBlock</code>.</div></details></div></details>","IntoConcreteBlock<(A, B, C, D, E, F, G)>","wry::webview::RGBA"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F,+G,+H)%3E-for-X\" class=\"impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#228\">source</a><a href=\"#impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F,+G,+H)%3E-for-X\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C, D, E, F, G, H, R, X&gt; <a class=\"trait\" href=\"block/trait.IntoConcreteBlock.html\" title=\"trait block::IntoConcreteBlock\">IntoConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H)</a>&gt; for X<div class=\"where\">where\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H) -&gt; R,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ret\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ret\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"block/trait.IntoConcreteBlock.html#associatedtype.Ret\" class=\"associatedtype\">Ret</a> = R</h4></section></summary><div class='docblock'>The return type of the resulting <code>ConcreteBlock</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_concrete_block\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#228\">source</a><a href=\"#method.into_concrete_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"block/trait.IntoConcreteBlock.html#tymethod.into_concrete_block\" class=\"fn\">into_concrete_block</a>(self) -&gt; <a class=\"struct\" href=\"block/struct.ConcreteBlock.html\" title=\"struct block::ConcreteBlock\">ConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H)</a>, R, X&gt;</h4></section></summary><div class='docblock'>Consumes self to create a <code>ConcreteBlock</code>.</div></details></div></details>","IntoConcreteBlock<(A, B, C, D, E, F, G, H)>","wry::webview::RGBA"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F,+G,+H,+I)%3E-for-X\" class=\"impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#229\">source</a><a href=\"#impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F,+G,+H,+I)%3E-for-X\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C, D, E, F, G, H, I, R, X&gt; <a class=\"trait\" href=\"block/trait.IntoConcreteBlock.html\" title=\"trait block::IntoConcreteBlock\">IntoConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I)</a>&gt; for X<div class=\"where\">where\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I) -&gt; R,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ret\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ret\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"block/trait.IntoConcreteBlock.html#associatedtype.Ret\" class=\"associatedtype\">Ret</a> = R</h4></section></summary><div class='docblock'>The return type of the resulting <code>ConcreteBlock</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_concrete_block\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#229\">source</a><a href=\"#method.into_concrete_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"block/trait.IntoConcreteBlock.html#tymethod.into_concrete_block\" class=\"fn\">into_concrete_block</a>(self) -&gt; <a class=\"struct\" href=\"block/struct.ConcreteBlock.html\" title=\"struct block::ConcreteBlock\">ConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I)</a>, R, X&gt;</h4></section></summary><div class='docblock'>Consumes self to create a <code>ConcreteBlock</code>.</div></details></div></details>","IntoConcreteBlock<(A, B, C, D, E, F, G, H, I)>","wry::webview::RGBA"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J)%3E-for-X\" class=\"impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#230\">source</a><a href=\"#impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J)%3E-for-X\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C, D, E, F, G, H, I, J, R, X&gt; <a class=\"trait\" href=\"block/trait.IntoConcreteBlock.html\" title=\"trait block::IntoConcreteBlock\">IntoConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J)</a>&gt; for X<div class=\"where\">where\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J) -&gt; R,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ret\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ret\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"block/trait.IntoConcreteBlock.html#associatedtype.Ret\" class=\"associatedtype\">Ret</a> = R</h4></section></summary><div class='docblock'>The return type of the resulting <code>ConcreteBlock</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_concrete_block\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#230\">source</a><a href=\"#method.into_concrete_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"block/trait.IntoConcreteBlock.html#tymethod.into_concrete_block\" class=\"fn\">into_concrete_block</a>(\n    self\n) -&gt; <a class=\"struct\" href=\"block/struct.ConcreteBlock.html\" title=\"struct block::ConcreteBlock\">ConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J)</a>, R, X&gt;</h4></section></summary><div class='docblock'>Consumes self to create a <code>ConcreteBlock</code>.</div></details></div></details>","IntoConcreteBlock<(A, B, C, D, E, F, G, H, I, J)>","wry::webview::RGBA"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K)%3E-for-X\" class=\"impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#231\">source</a><a href=\"#impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K)%3E-for-X\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C, D, E, F, G, H, I, J, K, R, X&gt; <a class=\"trait\" href=\"block/trait.IntoConcreteBlock.html\" title=\"trait block::IntoConcreteBlock\">IntoConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K)</a>&gt; for X<div class=\"where\">where\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K) -&gt; R,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ret\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ret\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"block/trait.IntoConcreteBlock.html#associatedtype.Ret\" class=\"associatedtype\">Ret</a> = R</h4></section></summary><div class='docblock'>The return type of the resulting <code>ConcreteBlock</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_concrete_block\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#231\">source</a><a href=\"#method.into_concrete_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"block/trait.IntoConcreteBlock.html#tymethod.into_concrete_block\" class=\"fn\">into_concrete_block</a>(\n    self\n) -&gt; <a class=\"struct\" href=\"block/struct.ConcreteBlock.html\" title=\"struct block::ConcreteBlock\">ConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K)</a>, R, X&gt;</h4></section></summary><div class='docblock'>Consumes self to create a <code>ConcreteBlock</code>.</div></details></div></details>","IntoConcreteBlock<(A, B, C, D, E, F, G, H, I, J, K)>","wry::webview::RGBA"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L)%3E-for-X\" class=\"impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#232\">source</a><a href=\"#impl-IntoConcreteBlock%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L)%3E-for-X\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, C, D, E, F, G, H, I, J, K, L, R, X&gt; <a class=\"trait\" href=\"block/trait.IntoConcreteBlock.html\" title=\"trait block::IntoConcreteBlock\">IntoConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L)</a>&gt; for X<div class=\"where\">where\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.78.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(A, B, C, D, E, F, G, H, I, J, K, L) -&gt; R,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ret\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ret\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"block/trait.IntoConcreteBlock.html#associatedtype.Ret\" class=\"associatedtype\">Ret</a> = R</h4></section></summary><div class='docblock'>The return type of the resulting <code>ConcreteBlock</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_concrete_block\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/block/lib.rs.html#232\">source</a><a href=\"#method.into_concrete_block\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"block/trait.IntoConcreteBlock.html#tymethod.into_concrete_block\" class=\"fn\">into_concrete_block</a>(\n    self\n) -&gt; <a class=\"struct\" href=\"block/struct.ConcreteBlock.html\" title=\"struct block::ConcreteBlock\">ConcreteBlock</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.78.0/std/primitive.tuple.html\">(A, B, C, D, E, F, G, H, I, J, K, L)</a>, R, X&gt;</h4></section></summary><div class='docblock'>Consumes self to create a <code>ConcreteBlock</code>.</div></details></div></details>","IntoConcreteBlock<(A, B, C, D, E, F, G, H, I, J, K, L)>","wry::webview::RGBA"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()