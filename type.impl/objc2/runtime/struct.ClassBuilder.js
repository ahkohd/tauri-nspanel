(function() {
    var type_impls = Object.fromEntries([["objc2",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ClassBuilder\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#178-440\">source</a><a href=\"#impl-ClassBuilder\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"objc2/runtime/struct.ClassBuilder.html\" title=\"struct objc2::runtime::ClassBuilder\">ClassBuilder</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#207-209\">source</a><h4 class=\"code-header\">pub fn <a href=\"objc2/runtime/struct.ClassBuilder.html#tymethod.new\" class=\"fn\">new</a>(name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.str.html\">str</a>, superclass: &amp;<a class=\"struct\" href=\"objc2/runtime/struct.AnyClass.html\" title=\"struct objc2::runtime::AnyClass\">AnyClass</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a <a href=\"objc2/runtime/struct.ClassBuilder.html\" title=\"struct objc2::runtime::ClassBuilder\"><code>ClassBuilder</code></a> with the given name and superclass.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the class couldn’t be allocated, or a class with\nthat name already exist.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.root\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#225-233\">source</a><h4 class=\"code-header\">pub fn <a href=\"objc2/runtime/struct.ClassBuilder.html#tymethod.root\" class=\"fn\">root</a>&lt;F&gt;(name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.str.html\">str</a>, intitialize_fn: F) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"objc2/runtime/trait.MethodImplementation.html\" title=\"trait objc2::runtime::MethodImplementation\">MethodImplementation</a>&lt;Callee = <a class=\"struct\" href=\"objc2/runtime/struct.AnyClass.html\" title=\"struct objc2::runtime::AnyClass\">AnyClass</a>, Arguments = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.unit.html\">()</a>, Return = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Constructs a <a href=\"objc2/runtime/struct.ClassBuilder.html\" title=\"struct objc2::runtime::ClassBuilder\"><code>ClassBuilder</code></a> declaring a new root class with the\ngiven name.</p>\n<p>Returns <a href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> if the class couldn’t be allocated.</p>\n<p>An implementation for <code>+initialize</code> must also be given; the runtime\ncalls this method for all classes, so it must be defined on root\nclasses.</p>\n<p>Note that implementing a root class is not a simple endeavor!\nFor example, your class probably cannot be passed to Cocoa code unless\nthe entire <code>NSObject</code> protocol is implemented.\nFunctionality it expects, like implementations of <code>-retain</code> and\n<code>-release</code> used by ARC, will not be present otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_method\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#252-265\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"objc2/runtime/struct.ClassBuilder.html#tymethod.add_method\" class=\"fn\">add_method</a>&lt;T, F&gt;(&amp;mut self, sel: <a class=\"struct\" href=\"objc2/runtime/struct.Sel.html\" title=\"struct objc2::runtime::Sel\">Sel</a>, func: F)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"objc2/trait.Message.html\" title=\"trait objc2::Message\">Message</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"objc2/runtime/trait.MethodImplementation.html\" title=\"trait objc2::runtime::MethodImplementation\">MethodImplementation</a>&lt;Callee = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Adds a method with the given name and implementation.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the method wasn’t sucessfully added (e.g. a method with that\nname already exists).</p>\n<p>May also panic if the method was detected to be invalid in some way;\nfor example if <code>debug_assertions</code> are enabled and the method is\noverriding another method, we verify that their encodings are equal.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The caller must ensure that the types match those that are expected\nwhen the method is invoked from Objective-C.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_class_method\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#317-329\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"objc2/runtime/struct.ClassBuilder.html#tymethod.add_class_method\" class=\"fn\">add_class_method</a>&lt;F&gt;(&amp;mut self, sel: <a class=\"struct\" href=\"objc2/runtime/struct.Sel.html\" title=\"struct objc2::runtime::Sel\">Sel</a>, func: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"objc2/runtime/trait.MethodImplementation.html\" title=\"trait objc2::runtime::MethodImplementation\">MethodImplementation</a>&lt;Callee = <a class=\"struct\" href=\"objc2/runtime/struct.AnyClass.html\" title=\"struct objc2::runtime::AnyClass\">AnyClass</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Adds a class method with the given name and implementation.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics in the same cases as <a href=\"objc2/runtime/struct.ClassBuilder.html#method.add_method\" title=\"method objc2::runtime::ClassBuilder::add_method\"><code>add_method</code></a>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>The caller must ensure that the types match those that are expected\nwhen the method is invoked from Objective-C.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_ivar\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#377-380\">source</a><h4 class=\"code-header\">pub fn <a href=\"objc2/runtime/struct.ClassBuilder.html#tymethod.add_ivar\" class=\"fn\">add_ivar</a>&lt;T: <a class=\"trait\" href=\"objc2/encode/trait.Encode.html\" title=\"trait objc2::encode::Encode\">Encode</a>&gt;(&amp;mut self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.str.html\">str</a>)</h4></section></summary><div class=\"docblock\"><p>Adds an ivar with type <code>T</code> and the provided name.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>If the ivar wasn’t successfully added for some reason - this usually\nhappens if there already was an ivar with that name.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_protocol\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#422-428\">source</a><h4 class=\"code-header\">pub fn <a href=\"objc2/runtime/struct.ClassBuilder.html#tymethod.add_protocol\" class=\"fn\">add_protocol</a>(&amp;mut self, proto: &amp;<a class=\"struct\" href=\"objc2/runtime/struct.AnyProtocol.html\" title=\"struct objc2::runtime::AnyProtocol\">AnyProtocol</a>)</h4></section></summary><div class=\"docblock\"><p>Adds the given protocol to self.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>If the protocol wasn’t successfully added.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#434-439\">source</a><h4 class=\"code-header\">pub fn <a href=\"objc2/runtime/struct.ClassBuilder.html#tymethod.register\" class=\"fn\">register</a>(self) -&gt; &amp;'static <a class=\"struct\" href=\"objc2/runtime/struct.AnyClass.html\" title=\"struct objc2::runtime::AnyClass\">AnyClass</a></h4></section></summary><div class=\"docblock\"><p>Registers the <a href=\"objc2/runtime/struct.ClassBuilder.html\" title=\"struct objc2::runtime::ClassBuilder\"><code>ClassBuilder</code></a>, consuming it, and returns a reference\nto the newly registered <a href=\"objc2/runtime/struct.AnyClass.html\" title=\"struct objc2::runtime::AnyClass\"><code>AnyClass</code></a>.</p>\n</div></details></div></details>",0,"objc2::declare::ClassDecl"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-ClassBuilder\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#157\">source</a><a href=\"#impl-Debug-for-ClassBuilder\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"objc2/runtime/struct.ClassBuilder.html\" title=\"struct objc2::runtime::ClassBuilder\">ClassBuilder</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#157\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","objc2::declare::ClassDecl"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-ClassBuilder\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#442-457\">source</a><a href=\"#impl-Drop-for-ClassBuilder\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"objc2/runtime/struct.ClassBuilder.html\" title=\"struct objc2::runtime::ClassBuilder\">ClassBuilder</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#443-456\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","objc2::declare::ClassDecl"],["<section id=\"impl-Send-for-ClassBuilder\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#175\">source</a><a href=\"#impl-Send-for-ClassBuilder\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"objc2/runtime/struct.ClassBuilder.html\" title=\"struct objc2::runtime::ClassBuilder\">ClassBuilder</a></h3></section>","Send","objc2::declare::ClassDecl"],["<section id=\"impl-Sync-for-ClassBuilder\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/declare.rs.html#176\">source</a><a href=\"#impl-Sync-for-ClassBuilder\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"objc2/runtime/struct.ClassBuilder.html\" title=\"struct objc2::runtime::ClassBuilder\">ClassBuilder</a></h3></section>","Sync","objc2::declare::ClassDecl"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[13390]}