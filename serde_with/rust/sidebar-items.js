window.SIDEBAR_ITEMS = {"fn":[["deserialize_ignore_any","Deserialize any value, ignore it, and return the default value for the type being deserialized."]],"mod":[["btreemap_as_tuple_list","DEPRECATED De/Serialize a [`BTreeMap`] into a list of tuples"],["bytes_or_string","Deserialize from bytes or string"],["default_on_error","Deserialize value and return [`Default`] on error"],["default_on_null","Deserialize default value if encountering `null`."],["display_fromstr","De/Serialize using [`Display`] and [`FromStr`] implementation"],["double_option","Makes a distinction between a missing, unset, or existing value"],["hashmap_as_tuple_list","DEPRECATED De/Serialize a [`HashMap`] into a list of tuples"],["map_as_tuple_list","De/Serialize a Map into a list of tuples"],["maps_duplicate_key_is_error","Ensure no duplicate keys exist in a map."],["maps_first_key_wins","Ensure that the first key is taken, if duplicate keys exist"],["seq_display_fromstr","De/Serialize sequences using [`FromIterator`] and [`IntoIterator`] implementation for it and [`Display`] and [`FromStr`] implementation for each element"],["sets_duplicate_value_is_error","Ensure no duplicate values exist in a set."],["sets_first_value_wins","DEPRECATED Ensure that the first value is taken, if duplicate values exist"],["sets_last_value_wins","Ensure that the last value is taken, if duplicate values exist"],["string_empty_as_none","De/Serialize a [`Option<String>`] type while transforming the empty string to [`None`]"],["tuple_list_as_map","This serializes a list of tuples into a map and back"],["unwrap_or_skip","Serialize inner value if [`Some`]`(T)`. If [`None`], serialize the unit struct `()`."]],"struct":[["StringWithSeparator","De/Serialize a delimited collection using [`Display`] and [`FromStr`] implementation"]]};